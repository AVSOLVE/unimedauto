const fs = require('fs').promises;
const winston = require('winston');
const logColors = require('ansi-colors');
const { loginAuth } = require('../shared/loginAuth');
const config = require('./config');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' }),
  ],
});

async function extractDates(pageContent) {
  const paginationRegex = /href="pls_montarConsultaAut(.*?)"/gs;
  const paginationMatch = pageContent.match(paginationRegex);

  if (!paginationMatch) {
    throw new Error('Pagination URLs not found in page content.');
  }

  const dateRegex = /dtInicio=([\d\/]+)&amp;dtFim=([\d\/]+)/;
  const match = paginationMatch[0].match(dateRegex);

  if (!match) {
    throw new Error('Dates not found in pagination URL.');
  }
  return { dtInicio: match[1], dtFim: match[2] };
}

async function extractAndSaveData(pageContent) {
  const regex = /var\s+vlColunas\s*=\s*(\[[^\]]*\])/;
  console.log('extractAndSaveData', pageContent, regex.exec(pageContent));
  let match,
    count = 0,
    data = null;
  while ((match = regex.exec(pageContent)) !== null && count < 30) {
    data = await concatenateDataAtPositions(match[1]);
    console.log('extractAndSaveData', data);
    await fs.appendFile(config.paths.outputFile, `${data}\n`);
    count++;
  }
  return data;
}

async function concatenateDataAtPositions(dataString) {
  const dataArray = await clearData(dataString);
  const positions = config.dataPositions;
  const concatenatedData = positions
    .map((position) =>
      position === 29
        ? findSpecificData(dataArray) || ''
        : dataArray[position - 1] || ''
    )
    .join(';');
  return concatenatedData;
}

function findSpecificData(data) {
  return data.find((item) => item.length === 17 && /^\d+$/.test(item)) || null;
}

function isAtLeastOneMonthOld(dateString) {
  const [day, month, year] = dateString.split(';')[2].split(' ')[0].split('/');
  const inputDate = new Date(`${year}-${month}-${day}`);
  const today = new Date();
  const diffInDays = Math.floor((today - inputDate) / (1000 * 60 * 60 * 24));
  return diffInDays >= 30;
}

async function clearData(dataString) {
  return dataString
    .replace(/"/g, '')
    .split(',')
    .filter((item) => item.trim() !== '')
    .map((item) => item.trim());
}

async function loginAndNavigate() {
  try {
    const { page, browser } = await loginAuth();
    const frame = await getFrame(page);
    await frame.getByText('Autorização', { exact: true }).click();
    await frame.getByText('» Consulta de autorizações').click();
    console.log(logColors.bgGreenBright('REDIRECIONANDO! AGUARDE...'));
    return { page, browser };
  } catch (error) {
    console.error(
      logColors.bgYellowBright(
        `O REDIRECIONAMENTO FALHOU! ERRO: ${error.message}!`
      )
    );
    throw error;
  }
}

async function getFrame(page) {
  return page
    .frameLocator('iframe >> nth=0')
    .frameLocator('#principal')
    .frameLocator('td iframe')
    .frameLocator('frame >> nth=0');
}

async function extractAndSaveDataParallel(paginationUrls) {
  const { page } = await loginAndNavigate(); // Login and get the page instance
  const promises = paginationUrls.map(async (url) => {
    await page.goto(url, { waitUntil: 'load' });
    const pageContent = await page.content();
    return await extractAndSaveData(pageContent);
  });
  const results = await Promise.all(promises);
  await page.browser().close(); // Close the browser instance after processing
  return results;
}

function constructPaginationUrl(dtInicio, dtFim, index) {
  return `https://portal.unimedpalmas.coop.br/pls_montarConsultaAut.action?dtInicio=${dtInicio}&dtFim=${dtFim}&ieTipoProcesso=&ieTipoGuia=&ieTipoConsulta=&cdGuia=&cdBeneficiario=&cdMedico=&cdPrestador=&cdSenha=&ieStatus=&cdGuiaManual=&clickPaginacao=S&nrRegistroInicio=${index}`;
}

(async () => {
  const { page, browser } = await loginAndNavigate();
  try {
    await page.waitForResponse(config.urls.targetPage);
    await page.goto(config.urls.targetPage, { waitUntil: 'domcontentloaded' });
    const pageContent = await page.content();
    const { dtInicio, dtFim } = await extractDates(pageContent);
    console.log(dtInicio, dtFim);
    let index = 0;
    let counter = 1;
    let lastDataString = null;
    do {
      const paginationUrl = constructPaginationUrl(dtInicio, dtFim, index);
      await page.goto(paginationUrl, { waitUntil: 'load' });
      const pageContent = await page.content();
      lastDataString = await extractAndSaveData(pageContent);

      lastDataString &&
        console.log(
          logColors.bgCyanBright(
            `LOTE ${counter} EXTRAIDO COM SUCESSO! AGUARDE...`
          )
        );
      index += 30;
      counter++;
    } while (lastDataString && !isAtLeastOneMonthOld(lastDataString));
    // await browser.close();
  } catch (error) {
    console.error(`ERRO FATAL DE EXECUÇÃO: ${error}!`);
    // await browser.close();
  }
})();
